@page "/runs/"

@inject IAppSettingsService Svc
@inject NavigationManager NavManager

@if (Svc.AppSettings.DefaultConnectionStringIndex is null)
{
    <PleaseChooseDb />
}
else
{
    <PageHeader Title="Latest Eval Runs"></PageHeader>
    @if (Runs.Any())
    {
        <div class="mb-1">
            <button title="Refresh" class="btn btn-primary" @onclick="RefreshRunsAsync">
                <span class="oi oi-reload"></span> Refresh
            </button>
        </div>
    }
    <table class="table table-bordered table-striped">
        <thead>
            <tr>
                <th width="3%"></th>
                <th width="5%">ID</th>
                <th width="20%">Candidate</th>
                <th width="20%">Started</th>
                <th width="52%">Run Log Last Entry</th>
            </tr>
        </thead>
        <tbody>
            @if (Runs.Any())
            {
                @foreach (var run in Runs)
                {
                    <tr class="@run.Id">
                        <td class="text-center align-middle" rowspan="2">
                            <span class="@run.GetRunStatusCss()"></span>
                        </td>
                        <td class="text-center align-middle" rowspan="2">
                            <NavLink href="@{ "runs/" + @run.Id }">
                                @run.Id
                            </NavLink><br>
                            @run.CalcType
                        </td>
                        <td>
                            @run.CandidateName
                        </td>
                        <td>@DateTimeUtility.ToTimeAgo(run.StartedAtUtc, DateTime.UtcNow)</td>
                        <td>@run.RunLogLastEntry</td>
                    </tr>
                    <tr class="@run.Id">
                        <td colspan="100%">
                            <span>
                                @run.PeriodRangeLabel<br />
                                <small>Requested @DateTimeUtility.ToTimeAgo(run.EvalRequestedAtUtc, DateTime.UtcNow)</small>
                            </span>
                            @if (!string.IsNullOrEmpty(run.TimeSheetIds) && !string.IsNullOrEmpty(run.ExpenseSheetIds))
                            {
                                <span style="margin-left: 100px">Timesheet/s: @run.TimeSheetIds</span><span style="margin-left: 100px">Expense Sheet/s: @run.ExpenseSheetIds</span>
                            }
                            else if (!string.IsNullOrEmpty(run.TimeSheetIds))
                            {
                                <span style="margin-left: 100px">Timesheet/s: @run.TimeSheetIds</span>
                            }
                            else if (!string.IsNullOrEmpty(run.ExpenseSheetIds))
                            {
                                <span style="margin-left: 100px">Expense Sheet/s: @run.ExpenseSheetIds</span>
                            }
                        </td>
                    </tr>
                }
            }
            else
            {
                <tr>
                    <td colspan="100%">
                        <span style="width: 100%; text-align: left;">No records found</span>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<EvalRunLookupDto> _runs = new List<EvalRunLookupDto>();

    public IReadOnlyCollection<EvalRunLookupDto> Runs => new ObservableCollection<EvalRunLookupDto>(_runs.AsReadOnly());

    protected override async Task OnInitializedAsync()
    {
        Svc.OnChange += StateHasChanged;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender) return;

        await RefreshRunsAsync();
    }

    private async Task RefreshRunsAsync()
    {
        if (Svc.AppSettings.DefaultConnectionStringIndex != null)
        {
            try
            {
                _runs = await Db.FetchLatestRunsAsync(Svc.AppSettings.DefaultConnectionStringValue!);
                StateHasChanged();
            }
            catch (Exception ex)
            {
                //todo
            }
        }
    }
}
