@using Markdig

@page "/timesheet/"

@inject IAppSettingsService Svc
@inject NavigationManager NavManager

@if (Svc.AppSettings.DefaultConnectionStringIndex is null)
{
    <PleaseChooseDb />
}
else
{
    <h1>Timesheet Change Log</h1>
    @if (Sheets.Any())
    {
        <label>Select a timesheet:</label>
        <select value="" class="form-control" @onchange="@OnSelect">
            <option value="">-- Select --</option>
            <optgroup label="** Recently Modified **">
                @foreach (var sheet in Sheets.Where(w => w.HasRecentChanges).OrderBy(o => o.UserId).ThenBy(o => o.PlacementId).ThenByDescending(o => o.WeekEndingDate).ToList())
                {
                    <option value="@sheet.Id">
                        (@sheet.Id) @sheet.GetCandidate() - @sheet.GetPlacement() - @sheet.WeekEndingDate.Date.ToShortDateString()
                    </option>
                }
            </optgroup>
            @foreach (var group in Sheets.GroupBy(g => g.GetCandidate()).OrderBy(o => o.Key))
            {
                <optgroup label="@group.Key">
                    @{
                        var max = group.Max(m => m.Id).ToString().Length + 2;
                    }
                    @foreach (var sheet in group.OrderBy(o => o.PlacementId).ThenByDescending(o => o.WeekEndingDate).ToList())
                    {
                        <option value="@sheet.Id">
                            @Markdown.ToPlainText(@sheet.GetPaddedSheetId(max)) @sheet.GetCandidate() - @sheet.GetPlacement() - @sheet.WeekEndingDate.Date.ToShortDateString()
                        </option>
                    }
                </optgroup>
            }

        </select>
    }
    @if (Versions.Any())
    {
        <table>
            <tr>
                <th>Version</th>
                <th>Monday</th>
                <th>Tuesday</th>
                <th>Wednesday</th>
                <th>Thursday</th>
                <th>Friday</th>
                <th>Saturday</th>
                <th>Sunday</th>
            </tr>
            @foreach (var v in Versions.OrderByDescending(o => o.VersionNumber))
            {
                <tr>
                    <td>@('v' + @v.VersionNumber)</td>
                    @foreach (var dow in new List<DayOfWeek> { DayOfWeek.Monday, DayOfWeek.Tuesday, DayOfWeek.Wednesday, DayOfWeek.Thursday, DayOfWeek.Friday, DayOfWeek.Saturday, DayOfWeek.Sunday })
                    {
                        <td>
                            @foreach (var e in v.EntriesByDay(dow))
                            {
                                <div>@e.Quantity</div>

                                <br />
                            }
                        </td>
                    }
                </tr>
            }
        </table>
    }
}

@code {
    private List<TimesheetLookupDto> Sheets = new List<TimesheetLookupDto>();
    private List<TimesheetVersionDto> Versions = new List<TimesheetVersionDto>();

    protected override async Task OnInitializedAsync()
    {
        if (Svc.AppSettings.DefaultConnectionStringIndex != null)
        {
            try
            {
                Sheets = await Db.FetchTimesheetLookupsAsync(Svc.AppSettings.DefaultConnectionStringValue!);
                StateHasChanged();
            }
            catch (Exception ex)
            {
                //todo
            }
        }
    }

    async Task OnSelect(ChangeEventArgs e)
    {
        try
        {
            Versions = await Db.FetchTimesheetVersionsAsync(Svc.AppSettings.DefaultConnectionStringValue!, Convert.ToInt32(e.Value));
            StateHasChanged();
        }
        catch (Exception ex)
        {
            //todo
        }

        //Svc.AppSettings.DefaultConnectionStringIndex = int.TryParse(e.Value?.ToString(), out var i) ? i : null;
        //await Svc.Save(Svc.AppSettings);
    }
}
