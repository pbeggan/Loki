@page "/issues/"

@inject IAppSettingsService Svc
@inject NavigationManager NavManager

@if (Svc.AppSettings.DefaultConnectionStringIndex is null)
{
    <PleaseChooseDb />
}
else
{
    <PageHeader Title="Latest Issues"></PageHeader>
    <table class="table table-bordered table-striped">
        <thead>
            <tr>
                <th>ID</th>
                <th>Action</th>
                <th>Created</th>
            </tr>
        </thead>
        <tbody>
            @if (LatestIssues.Any())
            {
                @foreach (var issue in LatestIssues)
                {
                    <tr>
                        <td>@issue.IssueId</td>
                        <td>@issue.ToActionString()</td>
                        <td>@DateTimeUtility.ToTimeAgo(issue.DateAdded, TimeZoneInfo.ConvertTimeFromUtc(DateTime.UtcNow,
                                TimeZoneInfo.FindSystemTimeZoneById("Eastern Standard Time")))</td>
                    </tr>
                }
            }
            else
            {
                <tr>
                    <td colspan="100%">
                        <span style="width: 100%; text-align: left;">No records found</span>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<IssueLookupDto> _issues = new List<IssueLookupDto>();

    public IReadOnlyCollection<IssueLookupDto> LatestIssues => new ObservableCollection<IssueLookupDto>(_issues.AsReadOnly());

    protected override async Task OnInitializedAsync()
    {
        Svc.OnChange += StateHasChanged;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender) return;

        if (Svc.AppSettings.DefaultConnectionStringIndex != null)
        {
            try
            {
                _issues = await Db.FetchLatestIssuesAsync(Svc.AppSettings.DefaultConnectionStringValue!);
                StateHasChanged();
            }
            catch (Exception ex)
            {
                //todo
            }
        }
    }
}
