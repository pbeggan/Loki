@using Loki.Domain.Interfaces

@inject IAppSettingsService Svc

@if (Svc.AppSettings.Databases.Any())
{
    <label>Select a database:</label>
    <select value="@Svc.AppSettings.DefaultConnectionStringIndex" class="form-control" @onchange="@OnSelect">

        @{ var ctr = 0; }
        @foreach (var db in Svc.AppSettings.Databases)
        {
            <option value="@ctr">@db.Name</option>
            ctr++;
        }

    </select>
}

<section style="border: 1px solid black; padding: 20px; margin-top: 20px">
    <h2>Available Databases</h2>
    <table class="table table-bordered table-striped" style="width:100%">
        <tbody>
            @foreach (var db in DatabaseList)
            {
                <tr>
                    <td><input type="text" @bind="db.Name" placeholder="Name" style="width:100%" /></td>
                    <td><input type="text" @bind="db.ConnectionString" placeholder="Connection String" style="width:100%" /></td>
                    <td></td>
                </tr>
            }
        </tbody>
    </table>
    <button @onclick="@InvokeAddRow">Add Row</button>
    <button @onclick="@SaveDbs">Save Changes</button>
</section>

@code {
    List<Database> DatabaseList { get; set; } = new List<Database>();

    protected override async Task OnInitializedAsync() => DatabaseList = Svc.AppSettings.Databases.ToList();

    async Task OnSelect(ChangeEventArgs e)
    {
        Svc.AppSettings.DefaultConnectionStringIndex = int.TryParse(e.Value?.ToString(), out var i) ? i : null;
        await Svc.Save(Svc.AppSettings);
    }

    async Task InvokeAddRow()
    {
        DatabaseList.Add(new Database("", ""));
    }

    async Task SaveDbs()
    {
        DatabaseList.RemoveAll(db => !db.IsValid);
        Svc.AppSettings.Databases = DatabaseList.ToArray();
        await Svc.Save(Svc.AppSettings);
    }
}
