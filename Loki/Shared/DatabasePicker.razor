@using Loki.Domain.Interfaces

@inject IAppSettingsService Svc

@if (Svc.AppSettings.Databases.Any())
{
    <label>Database:</label>
    <select value="@Svc.AppSettings.DefaultConnectionString" class="form-control" @onchange="@OnSelect">

        @foreach (var db in Svc.AppSettings.Databases)
        {
            <option value="@db.ConnectionString">@db.Name</option>
        }

    </select>
}

<label>Available Databases</label>
<table class="table" style="width:100%">
    <tbody>
        @foreach (var db in DatabaseList)
        {
            <tr>
                <td><input type="text" @bind="db.Name" placeholder="Name" style="width:100%" /></td>
                <td><input type="text" @bind="db.ConnectionString" placeholder="Connection String" style="width:100%" /></td>
                <td></td>
            </tr>
        }
    </tbody>
</table>
<button @onclick="@InvokeAddRow">Add Row</button>
<button @onclick="@SaveDbs">Save Changes</button>

@code {
    List<Database> DatabaseList { get; set; } = new List<Database>();

    protected override async Task OnInitializedAsync()
    {
        DatabaseList = Svc.AppSettings.Databases.ToList();
    }

    async Task OnSelect(ChangeEventArgs e)
    {
        Svc.AppSettings.DefaultConnectionString = e.Value?.ToString();
        await Svc.Save(Svc.AppSettings);
    }

    async Task InvokeAddRow()
    {
        DatabaseList.Add(new Database("", ""));
    }

    async Task SaveDbs()
    {
        DatabaseList.RemoveAll(db => !db.IsValid);
        Svc.AppSettings.Databases = DatabaseList.ToArray();
        await Svc.Save(Svc.AppSettings);
    }
}
